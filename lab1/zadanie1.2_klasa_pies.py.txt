'''
Zadanie 2. Klasa Pies z dodatkowymi właściwościami
Rozbuduj klasę Pies , dodając dwie nowe właściwości wiek oraz kolor_siersci (obie z
getterami i setterami). Zapewnij, aby wiek był liczbą całkowitą większą bądź równą zero.
Następnie zmodyfikuj metodę przedstaw_sie(), aby zwracała pełne informacje o psie, w
tym wiek i kolor sierści. Stwórz obiekt klasy Pies i przetestuj jego działanie.

class Zwierze:
	def __init__(self, imie):
		self._imie = imie
	@property
	def imie(self):
		return self._imie
	@imie.setter
	def imie(self, wartosc):
		if not wartosc:
			raise ValueError("Imię nie może być puste")
	self._imie = wartosc
	def przedstaw_sie(self):
		return f"Jestem {self._imie}"

	class Pies(Zwierze):
		def __init__(self, imie, rasa, czy_szczeka_czesto):
			super().__init__(imie)
			self._rasa = rasa
			self._czy_szczeka_czesto = czy_szczeka_czesto
		@property
		def rasa(self):
			return self._rasa
		@rasa.setter
		def rasa(self, wartosc):
			if not wartosc:
				raise ValueError("Rasa nie może być pusta")
		self._rasa = wartosc
		@property
		def czy_szczeka_czesto(self):
			return self._czy_szczeka_czesto
		@czy_szczeka_czesto.setter
		def czy_szczeka_czesto(self, wartosc):
			if not isinstance(wartosc, bool):
				raise ValueError("Wartość dla 'czy szczeka często' musi być typu
					boolean (True/False)")
		self._czy_szczeka_czesto = wartosc
		def przedstaw_sie(self):
			szczeka_info = "szczekam często" if self.czy_szczeka_czesto else "nie
				szczekam często"
		return f"Jestem {self.imie}, a moja rasa to {self.rasa}, i{szczeka_info}"
'''

class Zwierze:
    def __init__(self, imie):
        self._imie = imie

    @property
    def imie(self):
        return self._imie

    @imie.setter
    def imie(self, wartosc):
        if not wartosc:
            raise ValueError("Imię nie może być puste")
        self._imie = wartosc

    def przedstaw_sie(self):
        return f"Jestem {self._imie}"

class Pies(Zwierze):
    def __init__(self, imie, rasa, czy_szczeka_czesto, wiek, kolor_siersci):
        super().__init__(imie)
        self._rasa = rasa
        self._czy_szczeka_czesto = czy_szczeka_czesto
        self.wiek = wiek
        self.kolor_siersci = kolor_siersci

    @property
    def rasa(self):
        return self._rasa

    @rasa.setter
    def rasa(self, wartosc):
        if not wartosc:
            raise ValueError("Rasa nie może być pusta")
        self._rasa = wartosc

    @property
    def czy_szczeka_czesto(self):
        return self._czy_szczeka_czesto

    @czy_szczeka_czesto.setter
    def czy_szczeka_czesto(self, wartosc):
        if not isinstance(wartosc, bool):
            raise ValueError("Wartość dla 'czy szczeka często' musi być typu boolean (True/False)")
        self._czy_szczeka_czesto = wartosc

    @property
    def wiek(self):
        return self._wiek

    @wiek.setter
    def wiek(self, wartosc):
        if not isinstance(wartosc, int) or wartosc < 0:
            raise ValueError("Wiek musi być liczbą całkowitą większą bądź równą zero")
        self._wiek = wartosc

    @property
    def kolor_siersci(self):
        return self._kolor_siersci

    @kolor_siersci.setter
    def kolor_siersci(self, wartosc):
        if not wartosc:
            raise ValueError("Kolor sierści nie może być pusty")
        self._kolor_siersci = wartosc

    def przedstaw_sie(self):
        szczeka_info = "szczekam często" if self.czy_szczeka_czesto else "nie szczekam często"
        return (f"Jestem {self.imie}, moja rasa to {self.rasa}, mam {self.wiek} lat, "
                f"mój kolor sierści to {self.kolor_siersci}, i {szczeka_info}.")

# Tworzenie obiektu klasy Pies
pies = Pies("Azor", "Labrador", True, 5, "czarny")

# Wywołanie metody przedstaw_sie
print(pies.przedstaw_sie())