'''
Zadanie 4
Dodaj metodę wysokosc_drzewa(), która zwróci wysokość drzewa BST. Wysokość drzewa definiuje się jako liczbę krawędzi od korzenia do najgłębszego liścia.
▪
Metoda powinna działać rekurencyjnie.
▪
Przetestuj metodę na kilku drzewach o różnej strukturze, np. pełnym, skrajnie lewostronnym lub prawostronnym.

class Wezel:
    def __init__(self, klucz):
        self.klucz = klucz
        self.lewy = None
        self.prawy = None


class BSTree:
    def __init__(self):
        self.korzen = None

    def _wstawianie_rekurencyjne(self, wezel, klucz):
        if klucz < wezel.klucz:
            if wezel.lewy is None:
                wezel.lewy = Wezel(klucz)
            else:
                self._wstawianie_rekurencyjne(wezel.lewy, klucz)
        elif klucz > wezel.klucz:
            if wezel.prawy is None:
                wezel.prawy = Wezel(klucz)
            else:
                self._wstawianie_rekurencyjne(wezel.prawy, klucz)

    def _wstawanie_iteracyjne(self, klucz):
        obecny_wezel = self.korzen

        while obecny_wezel is not None and obecny_wezel.klucz != klucz:
            if klucz < obecny_wezel.klucz:
                if obecny_wezel.lewy is None:
                    obecny_wezel.lewy = Wezel(klucz)
                    return

                obecny_wezel = obecny_wezel.lewy
            else:
                if obecny_wezel.prawy is None:
                    obecny_wezel.prawy = Wezel(klucz)
                    return

                obecny_wezel = obecny_wezel.prawy

    def wstawianie_klucza(self, klucz):
        if self.korzen is None:
            self.korzen = Wezel(klucz)
        else:
            self._wstawianie_rekurencyjne(self.korzen, klucz)
            # self._wstawanie_iteracyjne(klucz)

    def _min_klucz(self, obecny_wezel = None):
        if obecny_wezel is None:
            obecny_wezel = self.korzen
        while obecny_wezel.lewy is not None:
            obecny_wezel = obecny_wezel.lewy
        return obecny_wezel

    def usuwanie_klucza(self, klucz):
        self.korzen = self._usun_wezel(self.korzen, klucz)

    def _usun_wezel(self, wezel, klucz):
        if wezel is None:
            return None

        if klucz < wezel.klucz:
            wezel.lewy = self._usun_wezel(wezel.lewy, klucz)
        elif klucz > wezel.klucz:
            wezel.prawy = self._usun_wezel(wezel.prawy, klucz)
        else:
            # 1. Węzeł nie ma dzieci
            if wezel.lewy is None and wezel.prawy is None:
                return None

            # 2. Węzeł ma jedno dziecko
            if wezel.lewy is None:  # Ma tylko prawe dziecko
                return wezel.prawy
            elif wezel.prawy is None:  # Ma tylko lewe dziecko
                return wezel.lewy

            # 3. Węzeł ma dwoje dzieci
            nastepnik = self._min_klucz(wezel.prawy)
            wezel.klucz = nastepnik.klucz
            wezel.prawy = self._usun_wezel(wezel.prawy, nastepnik.klucz)

        return wezel

    def _LVR(self, wierzcholek):
        if wierzcholek.lewy is not None:
            self._LVR(wierzcholek.lewy)
        print(wierzcholek.klucz, end=" ")
        if wierzcholek.prawy is not None:
            self._LVR(wierzcholek.prawy)

    def wyswietlanie_drzewa(self):
        if self.korzen is None:
            print("Drzewo jest puste")
            return

        self._LVR(self.korzen)
        print()



if __name__ == "__main__":
    bstree = BSTree()

    bstree.wstawianie_klucza(8)
    bstree.wstawianie_klucza(3)
    bstree.wstawianie_klucza(1)
    bstree.wstawianie_klucza(6)
    bstree.wstawianie_klucza(4)
    bstree.wstawianie_klucza(7)
    bstree.wstawianie_klucza(10)
    bstree.wstawianie_klucza(14)
    bstree.wstawianie_klucza(13)

    bstree.wyswietlanie_drzewa()
    wizualizuj_drzewo(bstree.korzen)

    bstree.usuwanie_klucza(8)

    bstree.wyswietlanie_drzewa()

'''

class Wezel:
    def __init__(self, klucz):
        self.klucz = klucz
        self.lewy = None
        self.prawy = None


class BSTree:
    def __init__(self):
        self.korzen = None

    def _wstawianie_rekurencyjne(self, wezel, klucz):
        if klucz < wezel.klucz:
            if wezel.lewy is None:
                wezel.lewy = Wezel(klucz)
            else:
                self._wstawianie_rekurencyjne(wezel.lewy, klucz)
        elif klucz > wezel.klucz:
            if wezel.prawy is None:
                wezel.prawy = Wezel(klucz)
            else:
                self._wstawianie_rekurencyjne(wezel.prawy, klucz)

    def wstawianie_klucza(self, klucz):
        if self.korzen is None:
            self.korzen = Wezel(klucz)
        else:
            self._wstawianie_rekurencyjne(self.korzen, klucz)

    def wysokosc_drzewa(self):
        """Zwraca wysokość drzewa BST."""
        def oblicz_wysokosc(wezel):
            if wezel is None:
                return -1  # Dla pustych węzłów wysokość to -1 (liczba krawędzi)
            lewa_wysokosc = oblicz_wysokosc(wezel.lewy)
            prawa_wysokosc = oblicz_wysokosc(wezel.prawy)
            return 1 + max(lewa_wysokosc, prawa_wysokosc)

        return oblicz_wysokosc(self.korzen)

    def _LVR(self, wierzcholek):
        if wierzcholek.lewy is not None:
            self._LVR(wierzcholek.lewy)
        print(wierzcholek.klucz, end=" ")
        if wierzcholek.prawy is not None:
            self._LVR(wierzcholek.prawy)

    def wyswietlanie_drzewa(self):
        if self.korzen is None:
            print("Drzewo jest puste")
            return

        self._LVR(self.korzen)
        print()

# Testowanie
if __name__ == "__main__":
    bstree = BSTree()

    # Test 1: Drzewo pełne
    bstree.wstawianie_klucza(8)
    bstree.wstawianie_klucza(3)
    bstree.wstawianie_klucza(1)
    bstree.wstawianie_klucza(6)
    bstree.wstawianie_klucza(4)
    bstree.wstawianie_klucza(7)
    bstree.wstawianie_klucza(10)
    bstree.wstawianie_klucza(14)
    bstree.wstawianie_klucza(13)

    print("Drzewo w porządku rosnącym:")
    bstree.wyswietlanie_drzewa()
    print("Wysokość drzewa:", bstree.wysokosc_drzewa())

    # Test 2: Skrajnie lewostronne drzewo
    lewostronne = BSTree()
    lewostronne.wstawianie_klucza(10)
    lewostronne.wstawianie_klucza(9)
    lewostronne.wstawianie_klucza(8)
    lewostronne.wstawianie_klucza(7)
    lewostronne.wstawianie_klucza(6)

    print("\nSkrajnie lewostronne drzewo w porządku rosnącym:")
    lewostronne.wyswietlanie_drzewa()
    print("Wysokość lewostronnego drzewa:", lewostronne.wysokosc_drzewa())

    # Test 3: Skrajnie prawostronne drzewo
    prawostronne = BSTree()
    prawostronne.wstawianie_klucza(1)
    prawostronne.wstawianie_klucza(2)
    prawostronne.wstawianie_klucza(3)
    prawostronne.wstawianie_klucza(4)
    prawostronne.wstawianie_klucza(5)

    print("\nSkrajnie prawostronne drzewo w porządku rosnącym:")
    prawostronne.wyswietlanie_drzewa()
    print("Wysokość prawostronnego drzewa:", prawostronne.wysokosc_drzewa())